// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/sirupsen/logrus"
	"{{ cookiecutter.project_name }}/biz"
	"{{ cookiecutter.project_name }}/data"
	"{{ cookiecutter.project_name }}/middleware"
	"{{ cookiecutter.project_name }}/router"
	"{{ cookiecutter.project_name }}/router/api"
	"{{ cookiecutter.project_name }}/service"
	"{{ cookiecutter.project_name }}/task"
)

// Injectors from wire.go:

func wireApp(log *logrus.Logger) (*app, func(), error) {
	dataData, cleanup, err := data.NewData(log)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserData(log, dataData)
	userUseCase := biz.NewUserUseCase(userRepo)
	userService := service.NewUserService(log, userUseCase)
	groupRepo := data.NewGroupData(log, dataData)
	groupUseCase := biz.NewGroupUseCase(groupRepo)
	groupService := service.NewGroupService(groupUseCase, log)
	permissionRepo := data.NewPermissionData(log, dataData)
	permissionUseCase := biz.NewPermissionUseCase(permissionRepo)
	permissionService := service.NewPermissionService(permissionUseCase, log)
	operateLogRepo := data.NewOperateLogData(log, dataData)
	operateLogUseCase := biz.NewOperateLogUseCase(operateLogRepo)
	operateLogService := service.NewOperateLogService(operateLogUseCase, log)
	apiApi := api.NewApi(userService, groupService, permissionService, operateLogService)
	permTool := middleware.NewPermTool(userService)
	engine := router.NewRouter(apiApi, log, permTool)
	server := newHttpServer(engine, log)
	taskTask := task.NewTask(log)
	mainApp := newApp(server, log, taskTask)
	return mainApp, func() {
		cleanup()
	}, nil
}
