// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"{{ cookiecutter.project_name }}/data/ent/operatelog"
	"{{ cookiecutter.project_name }}/data/ent/predicate"
	"{{ cookiecutter.project_name }}/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperateLogUpdate is the builder for updating OperateLog entities.
type OperateLogUpdate struct {
	config
	hooks    []Hook
	mutation *OperateLogMutation
}

// Where appends a list predicates to the OperateLogUpdate builder.
func (olu *OperateLogUpdate) Where(ps ...predicate.OperateLog) *OperateLogUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetUpdatedAt sets the "updated_at" field.
func (olu *OperateLogUpdate) SetUpdatedAt(t time.Time) *OperateLogUpdate {
	olu.mutation.SetUpdatedAt(t)
	return olu
}

// SetName sets the "name" field.
func (olu *OperateLogUpdate) SetName(s string) *OperateLogUpdate {
	olu.mutation.SetName(s)
	return olu
}

// SetPath sets the "path" field.
func (olu *OperateLogUpdate) SetPath(s string) *OperateLogUpdate {
	olu.mutation.SetPath(s)
	return olu
}

// SetMethod sets the "method" field.
func (olu *OperateLogUpdate) SetMethod(s string) *OperateLogUpdate {
	olu.mutation.SetMethod(s)
	return olu
}

// SetIP sets the "ip" field.
func (olu *OperateLogUpdate) SetIP(s string) *OperateLogUpdate {
	olu.mutation.SetIP(s)
	return olu
}

// SetStatusCode sets the "status_code" field.
func (olu *OperateLogUpdate) SetStatusCode(i int) *OperateLogUpdate {
	olu.mutation.ResetStatusCode()
	olu.mutation.SetStatusCode(i)
	return olu
}

// AddStatusCode adds i to the "status_code" field.
func (olu *OperateLogUpdate) AddStatusCode(i int) *OperateLogUpdate {
	olu.mutation.AddStatusCode(i)
	return olu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (olu *OperateLogUpdate) SetUserID(id int) *OperateLogUpdate {
	olu.mutation.SetUserID(id)
	return olu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (olu *OperateLogUpdate) SetNillableUserID(id *int) *OperateLogUpdate {
	if id != nil {
		olu = olu.SetUserID(*id)
	}
	return olu
}

// SetUser sets the "user" edge to the User entity.
func (olu *OperateLogUpdate) SetUser(u *User) *OperateLogUpdate {
	return olu.SetUserID(u.ID)
}

// Mutation returns the OperateLogMutation object of the builder.
func (olu *OperateLogUpdate) Mutation() *OperateLogMutation {
	return olu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (olu *OperateLogUpdate) ClearUser() *OperateLogUpdate {
	olu.mutation.ClearUser()
	return olu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OperateLogUpdate) Save(ctx context.Context) (int, error) {
	olu.defaults()
	return withHooks[int, OperateLogMutation](ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OperateLogUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OperateLogUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OperateLogUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olu *OperateLogUpdate) defaults() {
	if _, ok := olu.mutation.UpdatedAt(); !ok {
		v := operatelog.UpdateDefaultUpdatedAt()
		olu.mutation.SetUpdatedAt(v)
	}
}

func (olu *OperateLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatelog.Table, operatelog.Columns, sqlgraph.NewFieldSpec(operatelog.FieldID, field.TypeInt))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := olu.mutation.UpdatedAt(); ok {
		_spec.SetField(operatelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := olu.mutation.Name(); ok {
		_spec.SetField(operatelog.FieldName, field.TypeString, value)
	}
	if value, ok := olu.mutation.Path(); ok {
		_spec.SetField(operatelog.FieldPath, field.TypeString, value)
	}
	if value, ok := olu.mutation.Method(); ok {
		_spec.SetField(operatelog.FieldMethod, field.TypeString, value)
	}
	if value, ok := olu.mutation.IP(); ok {
		_spec.SetField(operatelog.FieldIP, field.TypeString, value)
	}
	if value, ok := olu.mutation.StatusCode(); ok {
		_spec.SetField(operatelog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedStatusCode(); ok {
		_spec.AddField(operatelog.FieldStatusCode, field.TypeInt, value)
	}
	if olu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operatelog.UserTable,
			Columns: []string{operatelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operatelog.UserTable,
			Columns: []string{operatelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OperateLogUpdateOne is the builder for updating a single OperateLog entity.
type OperateLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperateLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oluo *OperateLogUpdateOne) SetUpdatedAt(t time.Time) *OperateLogUpdateOne {
	oluo.mutation.SetUpdatedAt(t)
	return oluo
}

// SetName sets the "name" field.
func (oluo *OperateLogUpdateOne) SetName(s string) *OperateLogUpdateOne {
	oluo.mutation.SetName(s)
	return oluo
}

// SetPath sets the "path" field.
func (oluo *OperateLogUpdateOne) SetPath(s string) *OperateLogUpdateOne {
	oluo.mutation.SetPath(s)
	return oluo
}

// SetMethod sets the "method" field.
func (oluo *OperateLogUpdateOne) SetMethod(s string) *OperateLogUpdateOne {
	oluo.mutation.SetMethod(s)
	return oluo
}

// SetIP sets the "ip" field.
func (oluo *OperateLogUpdateOne) SetIP(s string) *OperateLogUpdateOne {
	oluo.mutation.SetIP(s)
	return oluo
}

// SetStatusCode sets the "status_code" field.
func (oluo *OperateLogUpdateOne) SetStatusCode(i int) *OperateLogUpdateOne {
	oluo.mutation.ResetStatusCode()
	oluo.mutation.SetStatusCode(i)
	return oluo
}

// AddStatusCode adds i to the "status_code" field.
func (oluo *OperateLogUpdateOne) AddStatusCode(i int) *OperateLogUpdateOne {
	oluo.mutation.AddStatusCode(i)
	return oluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oluo *OperateLogUpdateOne) SetUserID(id int) *OperateLogUpdateOne {
	oluo.mutation.SetUserID(id)
	return oluo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (oluo *OperateLogUpdateOne) SetNillableUserID(id *int) *OperateLogUpdateOne {
	if id != nil {
		oluo = oluo.SetUserID(*id)
	}
	return oluo
}

// SetUser sets the "user" edge to the User entity.
func (oluo *OperateLogUpdateOne) SetUser(u *User) *OperateLogUpdateOne {
	return oluo.SetUserID(u.ID)
}

// Mutation returns the OperateLogMutation object of the builder.
func (oluo *OperateLogUpdateOne) Mutation() *OperateLogMutation {
	return oluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oluo *OperateLogUpdateOne) ClearUser() *OperateLogUpdateOne {
	oluo.mutation.ClearUser()
	return oluo
}

// Where appends a list predicates to the OperateLogUpdate builder.
func (oluo *OperateLogUpdateOne) Where(ps ...predicate.OperateLog) *OperateLogUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OperateLogUpdateOne) Select(field string, fields ...string) *OperateLogUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OperateLog entity.
func (oluo *OperateLogUpdateOne) Save(ctx context.Context) (*OperateLog, error) {
	oluo.defaults()
	return withHooks[*OperateLog, OperateLogMutation](ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OperateLogUpdateOne) SaveX(ctx context.Context) *OperateLog {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OperateLogUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OperateLogUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oluo *OperateLogUpdateOne) defaults() {
	if _, ok := oluo.mutation.UpdatedAt(); !ok {
		v := operatelog.UpdateDefaultUpdatedAt()
		oluo.mutation.SetUpdatedAt(v)
	}
}

func (oluo *OperateLogUpdateOne) sqlSave(ctx context.Context) (_node *OperateLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatelog.Table, operatelog.Columns, sqlgraph.NewFieldSpec(operatelog.FieldID, field.TypeInt))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperateLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operatelog.FieldID)
		for _, f := range fields {
			if !operatelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operatelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oluo.mutation.UpdatedAt(); ok {
		_spec.SetField(operatelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oluo.mutation.Name(); ok {
		_spec.SetField(operatelog.FieldName, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Path(); ok {
		_spec.SetField(operatelog.FieldPath, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Method(); ok {
		_spec.SetField(operatelog.FieldMethod, field.TypeString, value)
	}
	if value, ok := oluo.mutation.IP(); ok {
		_spec.SetField(operatelog.FieldIP, field.TypeString, value)
	}
	if value, ok := oluo.mutation.StatusCode(); ok {
		_spec.SetField(operatelog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedStatusCode(); ok {
		_spec.AddField(operatelog.FieldStatusCode, field.TypeInt, value)
	}
	if oluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operatelog.UserTable,
			Columns: []string{operatelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operatelog.UserTable,
			Columns: []string{operatelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OperateLog{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}
