// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"{{ cookiecutter.project_name }}/data/ent/operatelog"
	"{{ cookiecutter.project_name }}/data/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OperateLog is the model entity for the OperateLog schema.
type OperateLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperateLogQuery when eager-loading is set.
	Edges     OperateLogEdges `json:"edges"`
	user_logs *int
}

// OperateLogEdges holds the relations/edges for other nodes in the graph.
type OperateLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperateLogEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperateLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operatelog.FieldID, operatelog.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case operatelog.FieldName, operatelog.FieldPath, operatelog.FieldMethod, operatelog.FieldIP:
			values[i] = new(sql.NullString)
		case operatelog.FieldCreatedAt, operatelog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case operatelog.ForeignKeys[0]: // user_logs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OperateLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperateLog fields.
func (ol *OperateLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operatelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ol.ID = int(value.Int64)
		case operatelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ol.CreatedAt = value.Time
			}
		case operatelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ol.UpdatedAt = value.Time
			}
		case operatelog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ol.Name = value.String
			}
		case operatelog.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				ol.Path = value.String
			}
		case operatelog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ol.Method = value.String
			}
		case operatelog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ol.IP = value.String
			}
		case operatelog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				ol.StatusCode = int(value.Int64)
			}
		case operatelog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_logs", value)
			} else if value.Valid {
				ol.user_logs = new(int)
				*ol.user_logs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the OperateLog entity.
func (ol *OperateLog) QueryUser() *UserQuery {
	return NewOperateLogClient(ol.config).QueryUser(ol)
}

// Update returns a builder for updating this OperateLog.
// Note that you need to call OperateLog.Unwrap() before calling this method if this OperateLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OperateLog) Update() *OperateLogUpdateOne {
	return NewOperateLogClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OperateLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OperateLog) Unwrap() *OperateLog {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperateLog is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OperateLog) String() string {
	var builder strings.Builder
	builder.WriteString("OperateLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ol.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ol.Name)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(ol.Path)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(ol.Method)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ol.IP)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", ol.StatusCode))
	builder.WriteByte(')')
	return builder.String()
}

// OperateLogs is a parsable slice of OperateLog.
type OperateLogs []*OperateLog
