// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"{{ cookiecutter.project_name }}/data/ent/operatelog"
	"{{ cookiecutter.project_name }}/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperateLogCreate is the builder for creating a OperateLog entity.
type OperateLogCreate struct {
	config
	mutation *OperateLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (olc *OperateLogCreate) SetCreatedAt(t time.Time) *OperateLogCreate {
	olc.mutation.SetCreatedAt(t)
	return olc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (olc *OperateLogCreate) SetNillableCreatedAt(t *time.Time) *OperateLogCreate {
	if t != nil {
		olc.SetCreatedAt(*t)
	}
	return olc
}

// SetUpdatedAt sets the "updated_at" field.
func (olc *OperateLogCreate) SetUpdatedAt(t time.Time) *OperateLogCreate {
	olc.mutation.SetUpdatedAt(t)
	return olc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (olc *OperateLogCreate) SetNillableUpdatedAt(t *time.Time) *OperateLogCreate {
	if t != nil {
		olc.SetUpdatedAt(*t)
	}
	return olc
}

// SetName sets the "name" field.
func (olc *OperateLogCreate) SetName(s string) *OperateLogCreate {
	olc.mutation.SetName(s)
	return olc
}

// SetPath sets the "path" field.
func (olc *OperateLogCreate) SetPath(s string) *OperateLogCreate {
	olc.mutation.SetPath(s)
	return olc
}

// SetMethod sets the "method" field.
func (olc *OperateLogCreate) SetMethod(s string) *OperateLogCreate {
	olc.mutation.SetMethod(s)
	return olc
}

// SetIP sets the "ip" field.
func (olc *OperateLogCreate) SetIP(s string) *OperateLogCreate {
	olc.mutation.SetIP(s)
	return olc
}

// SetStatusCode sets the "status_code" field.
func (olc *OperateLogCreate) SetStatusCode(i int) *OperateLogCreate {
	olc.mutation.SetStatusCode(i)
	return olc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (olc *OperateLogCreate) SetUserID(id int) *OperateLogCreate {
	olc.mutation.SetUserID(id)
	return olc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (olc *OperateLogCreate) SetNillableUserID(id *int) *OperateLogCreate {
	if id != nil {
		olc = olc.SetUserID(*id)
	}
	return olc
}

// SetUser sets the "user" edge to the User entity.
func (olc *OperateLogCreate) SetUser(u *User) *OperateLogCreate {
	return olc.SetUserID(u.ID)
}

// Mutation returns the OperateLogMutation object of the builder.
func (olc *OperateLogCreate) Mutation() *OperateLogMutation {
	return olc.mutation
}

// Save creates the OperateLog in the database.
func (olc *OperateLogCreate) Save(ctx context.Context) (*OperateLog, error) {
	olc.defaults()
	return withHooks[*OperateLog, OperateLogMutation](ctx, olc.sqlSave, olc.mutation, olc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (olc *OperateLogCreate) SaveX(ctx context.Context) *OperateLog {
	v, err := olc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olc *OperateLogCreate) Exec(ctx context.Context) error {
	_, err := olc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olc *OperateLogCreate) ExecX(ctx context.Context) {
	if err := olc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olc *OperateLogCreate) defaults() {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		v := operatelog.DefaultCreatedAt()
		olc.mutation.SetCreatedAt(v)
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		v := operatelog.DefaultUpdatedAt()
		olc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olc *OperateLogCreate) check() error {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OperateLog.created_at"`)}
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OperateLog.updated_at"`)}
	}
	if _, ok := olc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OperateLog.name"`)}
	}
	if _, ok := olc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "OperateLog.path"`)}
	}
	if _, ok := olc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "OperateLog.method"`)}
	}
	if _, ok := olc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "OperateLog.ip"`)}
	}
	if _, ok := olc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "OperateLog.status_code"`)}
	}
	return nil
}

func (olc *OperateLogCreate) sqlSave(ctx context.Context) (*OperateLog, error) {
	if err := olc.check(); err != nil {
		return nil, err
	}
	_node, _spec := olc.createSpec()
	if err := sqlgraph.CreateNode(ctx, olc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	olc.mutation.id = &_node.ID
	olc.mutation.done = true
	return _node, nil
}

func (olc *OperateLogCreate) createSpec() (*OperateLog, *sqlgraph.CreateSpec) {
	var (
		_node = &OperateLog{config: olc.config}
		_spec = sqlgraph.NewCreateSpec(operatelog.Table, sqlgraph.NewFieldSpec(operatelog.FieldID, field.TypeInt))
	)
	if value, ok := olc.mutation.CreatedAt(); ok {
		_spec.SetField(operatelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := olc.mutation.UpdatedAt(); ok {
		_spec.SetField(operatelog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := olc.mutation.Name(); ok {
		_spec.SetField(operatelog.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := olc.mutation.Path(); ok {
		_spec.SetField(operatelog.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := olc.mutation.Method(); ok {
		_spec.SetField(operatelog.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := olc.mutation.IP(); ok {
		_spec.SetField(operatelog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := olc.mutation.StatusCode(); ok {
		_spec.SetField(operatelog.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if nodes := olc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operatelog.UserTable,
			Columns: []string{operatelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OperateLogCreateBulk is the builder for creating many OperateLog entities in bulk.
type OperateLogCreateBulk struct {
	config
	builders []*OperateLogCreate
}

// Save creates the OperateLog entities in the database.
func (olcb *OperateLogCreateBulk) Save(ctx context.Context) ([]*OperateLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(olcb.builders))
	nodes := make([]*OperateLog, len(olcb.builders))
	mutators := make([]Mutator, len(olcb.builders))
	for i := range olcb.builders {
		func(i int, root context.Context) {
			builder := olcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperateLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, olcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, olcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, olcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (olcb *OperateLogCreateBulk) SaveX(ctx context.Context) []*OperateLog {
	v, err := olcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olcb *OperateLogCreateBulk) Exec(ctx context.Context) error {
	_, err := olcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olcb *OperateLogCreateBulk) ExecX(ctx context.Context) {
	if err := olcb.Exec(ctx); err != nil {
		panic(err)
	}
}
